//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/raluc/FACULTATE/LFC/Compiler/Compiler/BasicLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BasicLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER_TYPE=1, FLOAT_TYPE=2, STRING_TYPE=3, DOUBLE_TYPE=4, VOID_TYPE=5, 
		IF_KEYWORD=6, ELSE_KEYWORD=7, WHILE_KEYWORD=8, FOR_KEYWORD=9, RETURN_KEYWORD=10, 
		ADD_OP=11, SUB_OP=12, MUL_OP=13, DIV_OP=14, MOD_OP=15, ASSIGN_OP=16, EQ_OP=17, 
		NEQ_OP=18, LT_OP=19, GT_OP=20, LEQ_OP=21, GEQ_OP=22, AND_OP=23, OR_OP=24, 
		NOT_OP=25, ADD_ASSIGN_OP=26, SUB_ASSIGN_OP=27, MUL_ASSIGN_OP=28, DIV_ASSIGN_OP=29, 
		MOD_ASSIGN_OP=30, INCREMENT_OP=31, DECREMENT_OP=32, LPAREN=33, RPAREN=34, 
		LBRACE=35, RBRACE=36, SEMI=37, COMMA=38, DOT=39, INTEGER_VALUE=40, FLOAT_VALUE=41, 
		STRING_VALUE=42, DOUBLE_VALUE=43, VARIABLE_NAME=44, WS=45, COMMENT=46, 
		LINE_COMMENT=47;
	public const int
		RULE_program = 0, RULE_returnStmt = 1, RULE_functionDefinition = 2, RULE_parameterList = 3, 
		RULE_parameter = 4, RULE_functionCall = 5, RULE_argumentList = 6, RULE_statement = 7, 
		RULE_blockStmt = 8, RULE_declaration = 9, RULE_type = 10, RULE_value = 11, 
		RULE_assignmentStmt = 12, RULE_exprStmt = 13, RULE_expr = 14, RULE_ifStmt = 15, 
		RULE_elseStmt = 16, RULE_whileStmt = 17, RULE_forStmt = 18, RULE_multiDeclaration = 19, 
		RULE_multiAssignment = 20, RULE_exprList = 21;
	public static readonly string[] ruleNames = {
		"program", "returnStmt", "functionDefinition", "parameterList", "parameter", 
		"functionCall", "argumentList", "statement", "blockStmt", "declaration", 
		"type", "value", "assignmentStmt", "exprStmt", "expr", "ifStmt", "elseStmt", 
		"whileStmt", "forStmt", "multiDeclaration", "multiAssignment", "exprList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'string'", "'double'", "'void'", "'if'", "'else'", 
		"'while'", "'for'", "'return'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'!'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'++'", "'--'", "'('", "')'", "'{'", "'}'", 
		"';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER_TYPE", "FLOAT_TYPE", "STRING_TYPE", "DOUBLE_TYPE", "VOID_TYPE", 
		"IF_KEYWORD", "ELSE_KEYWORD", "WHILE_KEYWORD", "FOR_KEYWORD", "RETURN_KEYWORD", 
		"ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", "MOD_OP", "ASSIGN_OP", "EQ_OP", 
		"NEQ_OP", "LT_OP", "GT_OP", "LEQ_OP", "GEQ_OP", "AND_OP", "OR_OP", "NOT_OP", 
		"ADD_ASSIGN_OP", "SUB_ASSIGN_OP", "MUL_ASSIGN_OP", "DIV_ASSIGN_OP", "MOD_ASSIGN_OP", 
		"INCREMENT_OP", "DECREMENT_OP", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"SEMI", "COMMA", "DOT", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
		"DOUBLE_VALUE", "VARIABLE_NAME", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BasicLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 62L) != 0)) {
				{
				State = 46;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 44;
					declaration();
					}
					break;
				case 2:
					{
					State = 45;
					functionDefinition();
					}
					break;
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN_KEYWORD() { return GetToken(BasicLanguageParser.RETURN_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(RETURN_KEYWORD);
			State = 54;
			expr(0);
			State = 55;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BasicLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BasicLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			type();
			State = 58;
			Match(VARIABLE_NAME);
			State = 59;
			Match(LPAREN);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 62L) != 0)) {
				{
				State = 60;
				parameterList();
				}
			}

			State = 63;
			Match(RPAREN);
			State = 64;
			Match(LBRACE);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34099926402942L) != 0)) {
				{
				{
				State = 65;
				statement();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicLanguageParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			parameter();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 74;
				Match(COMMA);
				State = 75;
				parameter();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			type();
			State = 82;
			Match(VARIABLE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(VARIABLE_NAME);
			State = 85;
			Match(LPAREN);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34099926401024L) != 0)) {
				{
				State = 86;
				argumentList();
				}
			}

			State = 89;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicLanguageParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 12, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			expr(0);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 92;
				Match(COMMA);
				State = 93;
				expr(0);
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmtContext assignmentStmt() {
			return GetRuleContext<AssignmentStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				assignmentStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101;
				exprStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				blockStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 103;
				returnStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_blockStmt);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF_KEYWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				ifStmt();
				}
				break;
			case WHILE_KEYWORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				whileStmt();
				}
				break;
			case FOR_KEYWORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108;
				forStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NAME() { return GetTokens(BasicLanguageParser.VARIABLE_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME(int i) {
			return GetToken(BasicLanguageParser.VARIABLE_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN_OP() { return GetTokens(BasicLanguageParser.ASSIGN_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP(int i) {
			return GetToken(BasicLanguageParser.ASSIGN_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicLanguageParser.COMMA, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			type();
			State = 112;
			Match(VARIABLE_NAME);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN_OP) {
				{
				State = 113;
				Match(ASSIGN_OP);
				State = 114;
				expr(0);
				}
			}

			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 117;
				Match(COMMA);
				State = 118;
				Match(VARIABLE_NAME);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN_OP) {
					{
					State = 119;
					Match(ASSIGN_OP);
					State = 120;
					expr(0);
					}
				}

				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(BasicLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(BasicLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(BasicLanguageParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(BasicLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(BasicLanguageParser.VOID_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 62L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(BasicLanguageParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(BasicLanguageParser.FLOAT_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(BasicLanguageParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_VALUE() { return GetToken(BasicLanguageParser.DOUBLE_VALUE, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492674416640L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmtContext : ParserRuleContext {
		public AssignmentStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStmt; } }
	 
		public AssignmentStmtContext() { }
		public virtual void CopyFrom(AssignmentStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivAssignExprContext : AssignmentStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN_OP() { return GetToken(BasicLanguageParser.DIV_ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		public DivAssignExprContext(AssignmentStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModAssignExprContext : AssignmentStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN_OP() { return GetToken(BasicLanguageParser.MOD_ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		public ModAssignExprContext(AssignmentStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubAssignExprContext : AssignmentStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN_OP() { return GetToken(BasicLanguageParser.SUB_ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		public SubAssignExprContext(AssignmentStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulAssignExprContext : AssignmentStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN_OP() { return GetToken(BasicLanguageParser.MUL_ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		public MulAssignExprContext(AssignmentStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExprContext : AssignmentStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP() { return GetToken(BasicLanguageParser.ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		public AssignExprContext(AssignmentStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddAssignExprContext : AssignmentStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN_OP() { return GetToken(BasicLanguageParser.ADD_ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		public AddAssignExprContext(AssignmentStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmtContext assignmentStmt() {
		AssignmentStmtContext _localctx = new AssignmentStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignmentStmt);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new AssignExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				Match(VARIABLE_NAME);
				State = 135;
				Match(ASSIGN_OP);
				State = 136;
				expr(0);
				State = 137;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new AddAssignExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(VARIABLE_NAME);
				State = 140;
				Match(ADD_ASSIGN_OP);
				State = 141;
				expr(0);
				State = 142;
				Match(SEMI);
				}
				break;
			case 3:
				_localctx = new SubAssignExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 144;
				Match(VARIABLE_NAME);
				State = 145;
				Match(SUB_ASSIGN_OP);
				State = 146;
				expr(0);
				State = 147;
				Match(SEMI);
				}
				break;
			case 4:
				_localctx = new MulAssignExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				Match(VARIABLE_NAME);
				State = 150;
				Match(MUL_ASSIGN_OP);
				State = 151;
				expr(0);
				State = 152;
				Match(SEMI);
				}
				break;
			case 5:
				_localctx = new DivAssignExprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 154;
				Match(VARIABLE_NAME);
				State = 155;
				Match(DIV_ASSIGN_OP);
				State = 156;
				expr(0);
				State = 157;
				Match(SEMI);
				}
				break;
			case 6:
				_localctx = new ModAssignExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 159;
				Match(VARIABLE_NAME);
				State = 160;
				Match(MOD_ASSIGN_OP);
				State = 161;
				expr(0);
				State = 162;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_exprStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			expr(0);
			State = 167;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrefixIncrementExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT_OP() { return GetToken(BasicLanguageParser.INCREMENT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrefixIncrementExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(BasicLanguageParser.AND_OP, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeqExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEQ_OP() { return GetToken(BasicLanguageParser.LEQ_OP, 0); }
		public LeqExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixIncrementExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT_OP() { return GetToken(BasicLanguageParser.INCREMENT_OP, 0); }
		public PostfixIncrementExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(BasicLanguageParser.FLOAT_VALUE, 0); }
		public FloatValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(BasicLanguageParser.STRING_VALUE, 0); }
		public StringValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeqExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEQ_OP() { return GetToken(BasicLanguageParser.GEQ_OP, 0); }
		public GeqExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_VALUE() { return GetToken(BasicLanguageParser.DOUBLE_VALUE, 0); }
		public DoubleValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LtExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_OP() { return GetToken(BasicLanguageParser.LT_OP, 0); }
		public LtExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GtExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_OP() { return GetToken(BasicLanguageParser.GT_OP, 0); }
		public GtExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(BasicLanguageParser.INTEGER_VALUE, 0); }
		public IntValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixDecrementExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT_OP() { return GetToken(BasicLanguageParser.DECREMENT_OP, 0); }
		public PostfixDecrementExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(BasicLanguageParser.OR_OP, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixDecrementExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT_OP() { return GetToken(BasicLanguageParser.DECREMENT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrefixDecrementExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_OP() { return GetToken(BasicLanguageParser.MUL_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OP() { return GetToken(BasicLanguageParser.DIV_OP, 0); }
		public MulDivExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(BasicLanguageParser.EQ_OP, 0); }
		public EqExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NeqExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ_OP() { return GetToken(BasicLanguageParser.NEQ_OP, 0); }
		public NeqExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(BasicLanguageParser.VARIABLE_NAME, 0); }
		public VariableExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_OP() { return GetToken(BasicLanguageParser.NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_OP() { return GetToken(BasicLanguageParser.MOD_OP, 0); }
		public ModExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_OP() { return GetToken(BasicLanguageParser.ADD_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(BasicLanguageParser.SUB_OP, 0); }
		public AddSubExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 170;
				Match(NOT_OP);
				State = 171;
				expr(12);
				}
				break;
			case 2:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172;
				Match(LPAREN);
				State = 173;
				expr(0);
				State = 174;
				Match(RPAREN);
				}
				break;
			case 3:
				{
				_localctx = new PrefixIncrementExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 176;
				Match(INCREMENT_OP);
				State = 177;
				expr(8);
				}
				break;
			case 4:
				{
				_localctx = new PrefixDecrementExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 178;
				Match(DECREMENT_OP);
				State = 179;
				expr(7);
				}
				break;
			case 5:
				{
				_localctx = new IntValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180;
				Match(INTEGER_VALUE);
				}
				break;
			case 6:
				{
				_localctx = new FloatValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181;
				Match(FLOAT_VALUE);
				}
				break;
			case 7:
				{
				_localctx = new DoubleValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				Match(DOUBLE_VALUE);
				}
				break;
			case 8:
				{
				_localctx = new StringValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183;
				Match(STRING_VALUE);
				}
				break;
			case 9:
				{
				_localctx = new FunctionCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184;
				functionCall();
				}
				break;
			case 10:
				{
				_localctx = new VariableExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185;
				Match(VARIABLE_NAME);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 231;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new MulDivExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 188;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 189;
						Match(MUL_OP);
						State = 190;
						expr(26);
						}
						break;
					case 2:
						{
						_localctx = new MulDivExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 191;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 192;
						Match(DIV_OP);
						State = 193;
						expr(25);
						}
						break;
					case 3:
						{
						_localctx = new ModExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 194;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 195;
						Match(MOD_OP);
						State = 196;
						expr(24);
						}
						break;
					case 4:
						{
						_localctx = new AddSubExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 197;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 198;
						Match(ADD_OP);
						State = 199;
						expr(23);
						}
						break;
					case 5:
						{
						_localctx = new AddSubExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 200;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 201;
						Match(SUB_OP);
						State = 202;
						expr(22);
						}
						break;
					case 6:
						{
						_localctx = new EqExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 203;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 204;
						Match(EQ_OP);
						State = 205;
						expr(21);
						}
						break;
					case 7:
						{
						_localctx = new NeqExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 206;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 207;
						Match(NEQ_OP);
						State = 208;
						expr(20);
						}
						break;
					case 8:
						{
						_localctx = new LtExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 209;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 210;
						Match(LT_OP);
						State = 211;
						expr(19);
						}
						break;
					case 9:
						{
						_localctx = new GtExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 212;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 213;
						Match(GT_OP);
						State = 214;
						expr(18);
						}
						break;
					case 10:
						{
						_localctx = new LeqExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 215;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 216;
						Match(LEQ_OP);
						State = 217;
						expr(17);
						}
						break;
					case 11:
						{
						_localctx = new GeqExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 218;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 219;
						Match(GEQ_OP);
						State = 220;
						expr(16);
						}
						break;
					case 12:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 221;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 222;
						Match(AND_OP);
						State = 223;
						expr(15);
						}
						break;
					case 13:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 224;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 225;
						Match(OR_OP);
						State = 226;
						expr(14);
						}
						break;
					case 14:
						{
						_localctx = new PostfixIncrementExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 227;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 228;
						Match(INCREMENT_OP);
						}
						break;
					case 15:
						{
						_localctx = new PostfixDecrementExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 229;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 230;
						Match(DECREMENT_OP);
						}
						break;
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_KEYWORD() { return GetToken(BasicLanguageParser.IF_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BasicLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BasicLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(IF_KEYWORD);
			State = 237;
			Match(LPAREN);
			State = 238;
			expr(0);
			State = 239;
			Match(RPAREN);
			State = 240;
			Match(LBRACE);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 241;
				statement();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 34099926402942L) != 0) );
			State = 246;
			Match(RBRACE);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE_KEYWORD) {
				{
				State = 247;
				elseStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_KEYWORD() { return GetToken(BasicLanguageParser.ELSE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BasicLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BasicLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(ELSE_KEYWORD);
			State = 251;
			Match(LBRACE);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 252;
				statement();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 34099926402942L) != 0) );
			State = 257;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_KEYWORD() { return GetToken(BasicLanguageParser.WHILE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BasicLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BasicLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_whileStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(WHILE_KEYWORD);
			State = 260;
			Match(LPAREN);
			State = 261;
			expr(0);
			State = 262;
			Match(RPAREN);
			State = 263;
			Match(LBRACE);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 264;
				statement();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 34099926402942L) != 0) );
			State = 269;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_KEYWORD() { return GetToken(BasicLanguageParser.FOR_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(BasicLanguageParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(BasicLanguageParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BasicLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BasicLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiDeclarationContext multiDeclaration() {
			return GetRuleContext<MultiDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiAssignmentContext multiAssignment() {
			return GetRuleContext<MultiAssignmentContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(FOR_KEYWORD);
			State = 272;
			Match(LPAREN);
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case STRING_TYPE:
			case DOUBLE_TYPE:
			case VOID_TYPE:
			case VARIABLE_NAME:
				{
				State = 275;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER_TYPE:
				case FLOAT_TYPE:
				case STRING_TYPE:
				case DOUBLE_TYPE:
				case VOID_TYPE:
					{
					State = 273;
					multiDeclaration();
					}
					break;
				case VARIABLE_NAME:
					{
					State = 274;
					multiAssignment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				{
				State = 277;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34099926401024L) != 0)) {
				{
				State = 280;
				expr(0);
				}
			}

			State = 283;
			Match(SEMI);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34099926401024L) != 0)) {
				{
				State = 284;
				exprList();
				}
			}

			State = 287;
			Match(RPAREN);
			State = 288;
			Match(LBRACE);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 289;
				statement();
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 34099926402942L) != 0) );
			State = 294;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NAME() { return GetTokens(BasicLanguageParser.VARIABLE_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME(int i) {
			return GetToken(BasicLanguageParser.VARIABLE_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN_OP() { return GetTokens(BasicLanguageParser.ASSIGN_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP(int i) {
			return GetToken(BasicLanguageParser.ASSIGN_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicLanguageParser.COMMA, i);
		}
		public MultiDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiDeclarationContext multiDeclaration() {
		MultiDeclarationContext _localctx = new MultiDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_multiDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			type();
			State = 297;
			Match(VARIABLE_NAME);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN_OP) {
				{
				State = 298;
				Match(ASSIGN_OP);
				State = 299;
				expr(0);
				}
			}

			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 302;
				Match(COMMA);
				State = 303;
				Match(VARIABLE_NAME);
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN_OP) {
					{
					State = 304;
					Match(ASSIGN_OP);
					State = 305;
					expr(0);
					}
				}

				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 313;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NAME() { return GetTokens(BasicLanguageParser.VARIABLE_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME(int i) {
			return GetToken(BasicLanguageParser.VARIABLE_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN_OP() { return GetTokens(BasicLanguageParser.ASSIGN_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP(int i) {
			return GetToken(BasicLanguageParser.ASSIGN_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BasicLanguageParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicLanguageParser.COMMA, i);
		}
		public MultiAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiAssignmentContext multiAssignment() {
		MultiAssignmentContext _localctx = new MultiAssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_multiAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(VARIABLE_NAME);
			State = 316;
			Match(ASSIGN_OP);
			State = 317;
			expr(0);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 318;
				Match(COMMA);
				State = 319;
				Match(VARIABLE_NAME);
				State = 320;
				Match(ASSIGN_OP);
				State = 321;
				expr(0);
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 327;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicLanguageParser.COMMA, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 42, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			expr(0);
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 330;
				Match(COMMA);
				State = 331;
				expr(0);
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 25);
		case 1: return Precpred(Context, 24);
		case 2: return Precpred(Context, 23);
		case 3: return Precpred(Context, 22);
		case 4: return Precpred(Context, 21);
		case 5: return Precpred(Context, 20);
		case 6: return Precpred(Context, 19);
		case 7: return Precpred(Context, 18);
		case 8: return Precpred(Context, 17);
		case 9: return Precpred(Context, 16);
		case 10: return Precpred(Context, 15);
		case 11: return Precpred(Context, 14);
		case 12: return Precpred(Context, 13);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,47,338,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,5,0,47,8,0,10,0,12,0,50,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,
		2,1,2,3,2,62,8,2,1,2,1,2,1,2,5,2,67,8,2,10,2,12,2,70,9,2,1,2,1,2,1,3,1,
		3,1,3,5,3,77,8,3,10,3,12,3,80,9,3,1,4,1,4,1,4,1,5,1,5,1,5,3,5,88,8,5,1,
		5,1,5,1,6,1,6,1,6,5,6,95,8,6,10,6,12,6,98,9,6,1,7,1,7,1,7,1,7,1,7,3,7,
		105,8,7,1,8,1,8,1,8,3,8,110,8,8,1,9,1,9,1,9,1,9,3,9,116,8,9,1,9,1,9,1,
		9,1,9,3,9,122,8,9,5,9,124,8,9,10,9,12,9,127,9,9,1,9,1,9,1,10,1,10,1,11,
		1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,3,12,165,8,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,187,8,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,5,14,232,8,14,10,14,12,14,235,9,14,1,15,1,15,1,15,1,15,1,15,1,15,
		4,15,243,8,15,11,15,12,15,244,1,15,1,15,3,15,249,8,15,1,16,1,16,1,16,4,
		16,254,8,16,11,16,12,16,255,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,4,
		17,266,8,17,11,17,12,17,267,1,17,1,17,1,18,1,18,1,18,1,18,3,18,276,8,18,
		1,18,3,18,279,8,18,1,18,3,18,282,8,18,1,18,1,18,3,18,286,8,18,1,18,1,18,
		1,18,4,18,291,8,18,11,18,12,18,292,1,18,1,18,1,19,1,19,1,19,1,19,3,19,
		301,8,19,1,19,1,19,1,19,1,19,3,19,307,8,19,5,19,309,8,19,10,19,12,19,312,
		9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,323,8,20,10,20,
		12,20,326,9,20,1,20,1,20,1,21,1,21,1,21,5,21,333,8,21,10,21,12,21,336,
		9,21,1,21,0,1,28,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,0,2,1,0,1,5,1,0,40,43,374,0,48,1,0,0,0,2,53,1,0,0,0,4,57,1,0,
		0,0,6,73,1,0,0,0,8,81,1,0,0,0,10,84,1,0,0,0,12,91,1,0,0,0,14,104,1,0,0,
		0,16,109,1,0,0,0,18,111,1,0,0,0,20,130,1,0,0,0,22,132,1,0,0,0,24,164,1,
		0,0,0,26,166,1,0,0,0,28,186,1,0,0,0,30,236,1,0,0,0,32,250,1,0,0,0,34,259,
		1,0,0,0,36,271,1,0,0,0,38,296,1,0,0,0,40,315,1,0,0,0,42,329,1,0,0,0,44,
		47,3,18,9,0,45,47,3,4,2,0,46,44,1,0,0,0,46,45,1,0,0,0,47,50,1,0,0,0,48,
		46,1,0,0,0,48,49,1,0,0,0,49,51,1,0,0,0,50,48,1,0,0,0,51,52,5,0,0,1,52,
		1,1,0,0,0,53,54,5,10,0,0,54,55,3,28,14,0,55,56,5,37,0,0,56,3,1,0,0,0,57,
		58,3,20,10,0,58,59,5,44,0,0,59,61,5,33,0,0,60,62,3,6,3,0,61,60,1,0,0,0,
		61,62,1,0,0,0,62,63,1,0,0,0,63,64,5,34,0,0,64,68,5,35,0,0,65,67,3,14,7,
		0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,71,1,0,0,
		0,70,68,1,0,0,0,71,72,5,36,0,0,72,5,1,0,0,0,73,78,3,8,4,0,74,75,5,38,0,
		0,75,77,3,8,4,0,76,74,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,
		0,79,7,1,0,0,0,80,78,1,0,0,0,81,82,3,20,10,0,82,83,5,44,0,0,83,9,1,0,0,
		0,84,85,5,44,0,0,85,87,5,33,0,0,86,88,3,12,6,0,87,86,1,0,0,0,87,88,1,0,
		0,0,88,89,1,0,0,0,89,90,5,34,0,0,90,11,1,0,0,0,91,96,3,28,14,0,92,93,5,
		38,0,0,93,95,3,28,14,0,94,92,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,
		1,0,0,0,97,13,1,0,0,0,98,96,1,0,0,0,99,105,3,18,9,0,100,105,3,24,12,0,
		101,105,3,26,13,0,102,105,3,16,8,0,103,105,3,2,1,0,104,99,1,0,0,0,104,
		100,1,0,0,0,104,101,1,0,0,0,104,102,1,0,0,0,104,103,1,0,0,0,105,15,1,0,
		0,0,106,110,3,30,15,0,107,110,3,34,17,0,108,110,3,36,18,0,109,106,1,0,
		0,0,109,107,1,0,0,0,109,108,1,0,0,0,110,17,1,0,0,0,111,112,3,20,10,0,112,
		115,5,44,0,0,113,114,5,16,0,0,114,116,3,28,14,0,115,113,1,0,0,0,115,116,
		1,0,0,0,116,125,1,0,0,0,117,118,5,38,0,0,118,121,5,44,0,0,119,120,5,16,
		0,0,120,122,3,28,14,0,121,119,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,
		123,117,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,128,
		1,0,0,0,127,125,1,0,0,0,128,129,5,37,0,0,129,19,1,0,0,0,130,131,7,0,0,
		0,131,21,1,0,0,0,132,133,7,1,0,0,133,23,1,0,0,0,134,135,5,44,0,0,135,136,
		5,16,0,0,136,137,3,28,14,0,137,138,5,37,0,0,138,165,1,0,0,0,139,140,5,
		44,0,0,140,141,5,26,0,0,141,142,3,28,14,0,142,143,5,37,0,0,143,165,1,0,
		0,0,144,145,5,44,0,0,145,146,5,27,0,0,146,147,3,28,14,0,147,148,5,37,0,
		0,148,165,1,0,0,0,149,150,5,44,0,0,150,151,5,28,0,0,151,152,3,28,14,0,
		152,153,5,37,0,0,153,165,1,0,0,0,154,155,5,44,0,0,155,156,5,29,0,0,156,
		157,3,28,14,0,157,158,5,37,0,0,158,165,1,0,0,0,159,160,5,44,0,0,160,161,
		5,30,0,0,161,162,3,28,14,0,162,163,5,37,0,0,163,165,1,0,0,0,164,134,1,
		0,0,0,164,139,1,0,0,0,164,144,1,0,0,0,164,149,1,0,0,0,164,154,1,0,0,0,
		164,159,1,0,0,0,165,25,1,0,0,0,166,167,3,28,14,0,167,168,5,37,0,0,168,
		27,1,0,0,0,169,170,6,14,-1,0,170,171,5,25,0,0,171,187,3,28,14,12,172,173,
		5,33,0,0,173,174,3,28,14,0,174,175,5,34,0,0,175,187,1,0,0,0,176,177,5,
		31,0,0,177,187,3,28,14,8,178,179,5,32,0,0,179,187,3,28,14,7,180,187,5,
		40,0,0,181,187,5,41,0,0,182,187,5,43,0,0,183,187,5,42,0,0,184,187,3,10,
		5,0,185,187,5,44,0,0,186,169,1,0,0,0,186,172,1,0,0,0,186,176,1,0,0,0,186,
		178,1,0,0,0,186,180,1,0,0,0,186,181,1,0,0,0,186,182,1,0,0,0,186,183,1,
		0,0,0,186,184,1,0,0,0,186,185,1,0,0,0,187,233,1,0,0,0,188,189,10,25,0,
		0,189,190,5,13,0,0,190,232,3,28,14,26,191,192,10,24,0,0,192,193,5,14,0,
		0,193,232,3,28,14,25,194,195,10,23,0,0,195,196,5,15,0,0,196,232,3,28,14,
		24,197,198,10,22,0,0,198,199,5,11,0,0,199,232,3,28,14,23,200,201,10,21,
		0,0,201,202,5,12,0,0,202,232,3,28,14,22,203,204,10,20,0,0,204,205,5,17,
		0,0,205,232,3,28,14,21,206,207,10,19,0,0,207,208,5,18,0,0,208,232,3,28,
		14,20,209,210,10,18,0,0,210,211,5,19,0,0,211,232,3,28,14,19,212,213,10,
		17,0,0,213,214,5,20,0,0,214,232,3,28,14,18,215,216,10,16,0,0,216,217,5,
		21,0,0,217,232,3,28,14,17,218,219,10,15,0,0,219,220,5,22,0,0,220,232,3,
		28,14,16,221,222,10,14,0,0,222,223,5,23,0,0,223,232,3,28,14,15,224,225,
		10,13,0,0,225,226,5,24,0,0,226,232,3,28,14,14,227,228,10,10,0,0,228,232,
		5,31,0,0,229,230,10,9,0,0,230,232,5,32,0,0,231,188,1,0,0,0,231,191,1,0,
		0,0,231,194,1,0,0,0,231,197,1,0,0,0,231,200,1,0,0,0,231,203,1,0,0,0,231,
		206,1,0,0,0,231,209,1,0,0,0,231,212,1,0,0,0,231,215,1,0,0,0,231,218,1,
		0,0,0,231,221,1,0,0,0,231,224,1,0,0,0,231,227,1,0,0,0,231,229,1,0,0,0,
		232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,29,1,0,0,0,235,233,
		1,0,0,0,236,237,5,6,0,0,237,238,5,33,0,0,238,239,3,28,14,0,239,240,5,34,
		0,0,240,242,5,35,0,0,241,243,3,14,7,0,242,241,1,0,0,0,243,244,1,0,0,0,
		244,242,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,248,5,36,0,0,247,249,
		3,32,16,0,248,247,1,0,0,0,248,249,1,0,0,0,249,31,1,0,0,0,250,251,5,7,0,
		0,251,253,5,35,0,0,252,254,3,14,7,0,253,252,1,0,0,0,254,255,1,0,0,0,255,
		253,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,5,36,0,0,258,33,1,
		0,0,0,259,260,5,8,0,0,260,261,5,33,0,0,261,262,3,28,14,0,262,263,5,34,
		0,0,263,265,5,35,0,0,264,266,3,14,7,0,265,264,1,0,0,0,266,267,1,0,0,0,
		267,265,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,270,5,36,0,0,270,35,
		1,0,0,0,271,272,5,9,0,0,272,278,5,33,0,0,273,276,3,38,19,0,274,276,3,40,
		20,0,275,273,1,0,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,279,5,37,0,0,
		278,275,1,0,0,0,278,277,1,0,0,0,279,281,1,0,0,0,280,282,3,28,14,0,281,
		280,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,285,5,37,0,0,284,286,3,
		42,21,0,285,284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,5,34,0,
		0,288,290,5,35,0,0,289,291,3,14,7,0,290,289,1,0,0,0,291,292,1,0,0,0,292,
		290,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,295,5,36,0,0,295,37,1,
		0,0,0,296,297,3,20,10,0,297,300,5,44,0,0,298,299,5,16,0,0,299,301,3,28,
		14,0,300,298,1,0,0,0,300,301,1,0,0,0,301,310,1,0,0,0,302,303,5,38,0,0,
		303,306,5,44,0,0,304,305,5,16,0,0,305,307,3,28,14,0,306,304,1,0,0,0,306,
		307,1,0,0,0,307,309,1,0,0,0,308,302,1,0,0,0,309,312,1,0,0,0,310,308,1,
		0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,314,5,37,0,0,
		314,39,1,0,0,0,315,316,5,44,0,0,316,317,5,16,0,0,317,324,3,28,14,0,318,
		319,5,38,0,0,319,320,5,44,0,0,320,321,5,16,0,0,321,323,3,28,14,0,322,318,
		1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,
		0,326,324,1,0,0,0,327,328,5,37,0,0,328,41,1,0,0,0,329,334,3,28,14,0,330,
		331,5,38,0,0,331,333,3,28,14,0,332,330,1,0,0,0,333,336,1,0,0,0,334,332,
		1,0,0,0,334,335,1,0,0,0,335,43,1,0,0,0,336,334,1,0,0,0,30,46,48,61,68,
		78,87,96,104,109,115,121,125,164,186,231,233,244,248,255,267,275,278,281,
		285,292,300,306,310,324,334
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
