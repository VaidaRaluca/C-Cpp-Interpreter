//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/raluc/FACULTATE/LFC/Compiler/Compiler/BasicLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BasicLanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER_TYPE=1, FLOAT_TYPE=2, STRING_TYPE=3, DOUBLE_TYPE=4, VOID_TYPE=5, 
		IF_KEYWORD=6, ELSE_KEYWORD=7, WHILE_KEYWORD=8, FOR_KEYWORD=9, RETURN_KEYWORD=10, 
		ADD_OP=11, SUB_OP=12, MUL_OP=13, DIV_OP=14, MOD_OP=15, ASSIGN_OP=16, EQ_OP=17, 
		NEQ_OP=18, LT_OP=19, GT_OP=20, LEQ_OP=21, GEQ_OP=22, AND_OP=23, OR_OP=24, 
		NOT_OP=25, ADD_ASSIGN_OP=26, SUB_ASSIGN_OP=27, MUL_ASSIGN_OP=28, DIV_ASSIGN_OP=29, 
		MOD_ASSIGN_OP=30, INCREMENT_OP=31, DECREMENT_OP=32, LPAREN=33, RPAREN=34, 
		LBRACE=35, RBRACE=36, SEMI=37, COMMA=38, DOT=39, INTEGER_VALUE=40, FLOAT_VALUE=41, 
		STRING_VALUE=42, DOUBLE_VALUE=43, VARIABLE_NAME=44, WS=45, COMMENT=46, 
		LINE_COMMENT=47;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER_TYPE", "FLOAT_TYPE", "STRING_TYPE", "DOUBLE_TYPE", "VOID_TYPE", 
		"IF_KEYWORD", "ELSE_KEYWORD", "WHILE_KEYWORD", "FOR_KEYWORD", "RETURN_KEYWORD", 
		"ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", "MOD_OP", "ASSIGN_OP", "EQ_OP", 
		"NEQ_OP", "LT_OP", "GT_OP", "LEQ_OP", "GEQ_OP", "AND_OP", "OR_OP", "NOT_OP", 
		"ADD_ASSIGN_OP", "SUB_ASSIGN_OP", "MUL_ASSIGN_OP", "DIV_ASSIGN_OP", "MOD_ASSIGN_OP", 
		"INCREMENT_OP", "DECREMENT_OP", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"SEMI", "COMMA", "DOT", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
		"DOUBLE_VALUE", "VARIABLE_NAME", "WS", "COMMENT", "LINE_COMMENT"
	};


	public BasicLanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BasicLanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'string'", "'double'", "'void'", "'if'", "'else'", 
		"'while'", "'for'", "'return'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'!'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'++'", "'--'", "'('", "')'", "'{'", "'}'", 
		"';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER_TYPE", "FLOAT_TYPE", "STRING_TYPE", "DOUBLE_TYPE", "VOID_TYPE", 
		"IF_KEYWORD", "ELSE_KEYWORD", "WHILE_KEYWORD", "FOR_KEYWORD", "RETURN_KEYWORD", 
		"ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", "MOD_OP", "ASSIGN_OP", "EQ_OP", 
		"NEQ_OP", "LT_OP", "GT_OP", "LEQ_OP", "GEQ_OP", "AND_OP", "OR_OP", "NOT_OP", 
		"ADD_ASSIGN_OP", "SUB_ASSIGN_OP", "MUL_ASSIGN_OP", "DIV_ASSIGN_OP", "MOD_ASSIGN_OP", 
		"INCREMENT_OP", "DECREMENT_OP", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"SEMI", "COMMA", "DOT", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
		"DOUBLE_VALUE", "VARIABLE_NAME", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicLanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,47,306,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
		1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
		1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,
		1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,
		5,39,224,8,39,10,39,12,39,227,9,39,3,39,229,8,39,1,40,1,40,1,40,5,40,234,
		8,40,10,40,12,40,237,9,40,3,40,239,8,40,1,40,1,40,4,40,243,8,40,11,40,
		12,40,244,1,41,1,41,1,41,1,41,5,41,251,8,41,10,41,12,41,254,9,41,1,41,
		1,41,1,42,1,42,1,42,3,42,261,8,42,1,42,4,42,264,8,42,11,42,12,42,265,1,
		43,1,43,5,43,270,8,43,10,43,12,43,273,9,43,1,44,4,44,276,8,44,11,44,12,
		44,277,1,44,1,44,1,45,1,45,1,45,1,45,5,45,286,8,45,10,45,12,45,289,9,45,
		1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,300,8,46,10,46,12,46,
		303,9,46,1,46,1,46,1,287,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
		19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
		43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
		67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
		91,46,93,47,1,0,9,1,0,49,57,1,0,48,57,2,0,34,34,92,92,2,0,69,69,101,101,
		2,0,43,43,45,45,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,
		0,9,10,13,13,32,32,2,0,10,10,13,13,318,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
		0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,1,95,1,0,0,0,3,99,1,0,0,0,5,105,1,0,0,0,7,112,1,0,0,0,9,119,1,0,0,0,
		11,124,1,0,0,0,13,127,1,0,0,0,15,132,1,0,0,0,17,138,1,0,0,0,19,142,1,0,
		0,0,21,149,1,0,0,0,23,151,1,0,0,0,25,153,1,0,0,0,27,155,1,0,0,0,29,157,
		1,0,0,0,31,159,1,0,0,0,33,161,1,0,0,0,35,164,1,0,0,0,37,167,1,0,0,0,39,
		169,1,0,0,0,41,171,1,0,0,0,43,174,1,0,0,0,45,177,1,0,0,0,47,180,1,0,0,
		0,49,183,1,0,0,0,51,185,1,0,0,0,53,188,1,0,0,0,55,191,1,0,0,0,57,194,1,
		0,0,0,59,197,1,0,0,0,61,200,1,0,0,0,63,203,1,0,0,0,65,206,1,0,0,0,67,208,
		1,0,0,0,69,210,1,0,0,0,71,212,1,0,0,0,73,214,1,0,0,0,75,216,1,0,0,0,77,
		218,1,0,0,0,79,228,1,0,0,0,81,238,1,0,0,0,83,246,1,0,0,0,85,257,1,0,0,
		0,87,267,1,0,0,0,89,275,1,0,0,0,91,281,1,0,0,0,93,295,1,0,0,0,95,96,5,
		105,0,0,96,97,5,110,0,0,97,98,5,116,0,0,98,2,1,0,0,0,99,100,5,102,0,0,
		100,101,5,108,0,0,101,102,5,111,0,0,102,103,5,97,0,0,103,104,5,116,0,0,
		104,4,1,0,0,0,105,106,5,115,0,0,106,107,5,116,0,0,107,108,5,114,0,0,108,
		109,5,105,0,0,109,110,5,110,0,0,110,111,5,103,0,0,111,6,1,0,0,0,112,113,
		5,100,0,0,113,114,5,111,0,0,114,115,5,117,0,0,115,116,5,98,0,0,116,117,
		5,108,0,0,117,118,5,101,0,0,118,8,1,0,0,0,119,120,5,118,0,0,120,121,5,
		111,0,0,121,122,5,105,0,0,122,123,5,100,0,0,123,10,1,0,0,0,124,125,5,105,
		0,0,125,126,5,102,0,0,126,12,1,0,0,0,127,128,5,101,0,0,128,129,5,108,0,
		0,129,130,5,115,0,0,130,131,5,101,0,0,131,14,1,0,0,0,132,133,5,119,0,0,
		133,134,5,104,0,0,134,135,5,105,0,0,135,136,5,108,0,0,136,137,5,101,0,
		0,137,16,1,0,0,0,138,139,5,102,0,0,139,140,5,111,0,0,140,141,5,114,0,0,
		141,18,1,0,0,0,142,143,5,114,0,0,143,144,5,101,0,0,144,145,5,116,0,0,145,
		146,5,117,0,0,146,147,5,114,0,0,147,148,5,110,0,0,148,20,1,0,0,0,149,150,
		5,43,0,0,150,22,1,0,0,0,151,152,5,45,0,0,152,24,1,0,0,0,153,154,5,42,0,
		0,154,26,1,0,0,0,155,156,5,47,0,0,156,28,1,0,0,0,157,158,5,37,0,0,158,
		30,1,0,0,0,159,160,5,61,0,0,160,32,1,0,0,0,161,162,5,61,0,0,162,163,5,
		61,0,0,163,34,1,0,0,0,164,165,5,33,0,0,165,166,5,61,0,0,166,36,1,0,0,0,
		167,168,5,60,0,0,168,38,1,0,0,0,169,170,5,62,0,0,170,40,1,0,0,0,171,172,
		5,60,0,0,172,173,5,61,0,0,173,42,1,0,0,0,174,175,5,62,0,0,175,176,5,61,
		0,0,176,44,1,0,0,0,177,178,5,38,0,0,178,179,5,38,0,0,179,46,1,0,0,0,180,
		181,5,124,0,0,181,182,5,124,0,0,182,48,1,0,0,0,183,184,5,33,0,0,184,50,
		1,0,0,0,185,186,5,43,0,0,186,187,5,61,0,0,187,52,1,0,0,0,188,189,5,45,
		0,0,189,190,5,61,0,0,190,54,1,0,0,0,191,192,5,42,0,0,192,193,5,61,0,0,
		193,56,1,0,0,0,194,195,5,47,0,0,195,196,5,61,0,0,196,58,1,0,0,0,197,198,
		5,37,0,0,198,199,5,61,0,0,199,60,1,0,0,0,200,201,5,43,0,0,201,202,5,43,
		0,0,202,62,1,0,0,0,203,204,5,45,0,0,204,205,5,45,0,0,205,64,1,0,0,0,206,
		207,5,40,0,0,207,66,1,0,0,0,208,209,5,41,0,0,209,68,1,0,0,0,210,211,5,
		123,0,0,211,70,1,0,0,0,212,213,5,125,0,0,213,72,1,0,0,0,214,215,5,59,0,
		0,215,74,1,0,0,0,216,217,5,44,0,0,217,76,1,0,0,0,218,219,5,46,0,0,219,
		78,1,0,0,0,220,229,5,48,0,0,221,225,7,0,0,0,222,224,7,1,0,0,223,222,1,
		0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,229,1,0,0,0,
		227,225,1,0,0,0,228,220,1,0,0,0,228,221,1,0,0,0,229,80,1,0,0,0,230,239,
		5,48,0,0,231,235,7,0,0,0,232,234,7,1,0,0,233,232,1,0,0,0,234,237,1,0,0,
		0,235,233,1,0,0,0,235,236,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,238,
		230,1,0,0,0,238,231,1,0,0,0,239,240,1,0,0,0,240,242,5,46,0,0,241,243,7,
		1,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,
		245,82,1,0,0,0,246,252,5,34,0,0,247,251,8,2,0,0,248,249,5,92,0,0,249,251,
		9,0,0,0,250,247,1,0,0,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,
		0,252,253,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,256,5,34,0,0,256,
		84,1,0,0,0,257,258,3,81,40,0,258,260,7,3,0,0,259,261,7,4,0,0,260,259,1,
		0,0,0,260,261,1,0,0,0,261,263,1,0,0,0,262,264,7,1,0,0,263,262,1,0,0,0,
		264,265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,86,1,0,0,0,267,271,
		7,5,0,0,268,270,7,6,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,
		0,271,272,1,0,0,0,272,88,1,0,0,0,273,271,1,0,0,0,274,276,7,7,0,0,275,274,
		1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,
		0,279,280,6,44,0,0,280,90,1,0,0,0,281,282,5,47,0,0,282,283,5,42,0,0,283,
		287,1,0,0,0,284,286,9,0,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,288,1,
		0,0,0,287,285,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,5,42,0,0,
		291,292,5,47,0,0,292,293,1,0,0,0,293,294,6,45,0,0,294,92,1,0,0,0,295,296,
		5,47,0,0,296,297,5,47,0,0,297,301,1,0,0,0,298,300,8,8,0,0,299,298,1,0,
		0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,
		301,1,0,0,0,304,305,6,46,0,0,305,94,1,0,0,0,14,0,225,228,235,238,244,250,
		252,260,265,271,277,287,301,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
